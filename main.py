# -*- coding: utf8 -*-
#/usr/bin/python3.7

import asyncio
import codecs
from datetime import datetime, timezone
import hashlib
import os
import random

from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.types.message import Message
from aiogram.dispatcher.filters import Filter

from mats_counter import count_mats
from helper import *

bot_version = '2.3.16'

bot_token = os.getenv('RUDEBOT_TELEGRAM_TOKEN')
flood_timeout = int(os.getenv('RUDEBOT_FLOOD_TIMEOUT', '10'))
destruction_timeout = int(os.getenv('RUDEBOT_DELETE_TIMEOUT', '30'))
database_filename = 'data/' + (os.getenv('RUDEBOT_DATABASE_FILENAME', 'db.json'))
whitelist_chats = os.getenv('RUDEBOT_ALLOWED_CHATS', '')

whitelist_chats: list = None if whitelist_chats == '' else [int(chat) for chat in whitelist_chats.split(',')]


increase_words = ['+', '—Å–ø–∞—Å–∏–±—ñ', '—Å–ø—Å', '–¥—è–∫–∏', '–¥—è–∫—Å', '–±–ª–∞–≥–æ–¥–∞—Ä–æ—á–∫–∞', '–≤–¥—è—á–Ω–∏–π', '—Å–ø–∞—Å–∏–±–æ', '–¥—è–∫—É—é', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'üëç', 'üòÅ', 'üòÇ', 'üòÑ', 'üòÜ', '—Ö–∞—Ö–∞', '–∞—Ö–∞—Ö']
decrease_words = ['-', 'üëé']

users = {}
user_karma = {}
# chat_messages = {}
last_top = None

bot: Bot = Bot(token=bot_token)
dp: Dispatcher = Dispatcher(bot)

def random_bool(probability: int) -> bool:
    '''probability 0..100'''
    return random.randint(0, 100) < probability

# def is_flood_message(message: types.Message):
#     chat_id: int = message.chat.id
#     chat_last_msg: Message = chat_messages.get(chat_id)
#     if not chat_last_msg:
#         chat_messages[chat_id] = message.date
#         return False
#     else:
#         is_flood = (message.date - chat_last_msg).seconds < flood_timeout
#         chat_messages[chat_id] = message.date
#         return is_flood

class ignore_old_messages(Filter):
    async def check(self, message: types.Message):
        return (datetime.now() - message.date).seconds < destruction_timeout

class white_list_chats(Filter):
    async def check(self, message: types.Message):
        if whitelist_chats:
            return message.chat.id in whitelist_chats
        return True


async def match_warn_message(message: types.Message) -> str:
    global bot

    #check if its reply
    if not message.reply_to_message:
        reply_text = '/warn –∞–±–æ /unwarn –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é, –Ω–∞ —á–∏—î—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
        return reply_text

    #check if user have rights
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    is_admin = member.user.mention == '@GroupAnonymousBot' or member.status == 'creator' or (member.status == 'administrator' and member.can_delete_messages)

    if not is_admin:
        reply_text = '/warn –∞–±–æ /unwarn –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤'
        return reply_text

    #check if reply not to another admin
    reply_to_member = await bot.get_chat_member(message.chat.id,  message.reply_to_message.from_user.id)
    is_member_admin = reply_to_member.user.mention == '@GroupAnonymousBot' or reply_to_member.status == 'creator' or (reply_to_member.status == 'administrator' and reply_to_member.can_delete_messages)
    if is_member_admin:
        reply_text = '/warn –∞–±–æ /unwarn –Ω–µ –¥—ñ—î –Ω–∞ –∞–¥–º—ñ–Ω—ñ–≤'
        return reply_text

    return None


async def match_scan_message(message: types.Message) -> str:
    global bot

    #check if its reply
    if not message.reply_to_message:
        reply_text = '/scan –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é, –Ω–∞ —á–∏—î—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
        return reply_text

    #check if user have rights
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    is_admin = member.user.mention == '@GroupAnonymousBot' or member.status == 'creator' or (member.status == 'administrator' and member.can_delete_messages)

    if not is_admin:
        reply_text = '/scan –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤'
        return reply_text

    return None


def update_user(func):
    async def wrapper(message: Message):
        user_id = message.from_user.id
        username = message.from_user.mention
        messageText = message.text.lower()

        mats = count_mats(messageText)
        add_or_update_user(user_id, username, mats)
        return await func(message)
    return wrapper


def add_or_update_user(user_id: int, username: str, mats_count: int):
    try:
        users[user_id]['username'] = username
        users[user_id]['total_messages'] += 1
        users[user_id]['total_mats'] += mats_count
        if not users[user_id].get('rude_coins'):
            users[user_id]['rude_coins'] = 0
    except:
        users[user_id] = {}
        users[user_id]['total_messages'] = 1
        users[user_id]['total_mats'] = mats_count
        users[user_id]['username'] = username
        users[user_id]['karma'] = 0
        users[user_id]['rude_coins'] = 0
        users[user_id]['warns'] = 0

    save_to_file(users)


def change_user_warns(user_id: int, warns_count: int):
    try:
        users[user_id]['warns'] += warns_count
    except:
        users[user_id]['warns'] = warns_count

    save_to_file(users)

    return users[user_id]['warns']


def get_karma(user_id : int):
    def size(id: int):
        return (id+6) % 15 + 7

    def orientation(id: int):
        result = hashlib.md5(id.to_bytes(8, 'big', signed=True)).hexdigest()
        _orientation = int(result, 16) 
        _orientation_1 = _orientation % 3
        _orientation_2 = _orientation % 5 % 2
        return _orientation_1, _orientation_2

    user = users[user_id]

    user_size = size(user_id)
    user_name = user['username']
    karma = user['karma']
    rude_coins = user['rude_coins']
    total_messages = user['total_messages']
    total_mats = user['total_mats']
    mats_percent = 0

    if total_mats > 0 and total_messages > 0:
        mats_percent = total_mats / total_messages
        mats_percent *= 100
        mats_percent = round(mats_percent, 2)

    karma_percent = 0
    if karma and total_messages:
        karma_percent = round(karma * 100 / total_messages, 2)

    replytext = f"–ü—Ä–∏–≤—ñ—Ç {user_name}, —Ç–≤–æ—è –∫–∞—Ä–º–∞:\n\n"
    replytext += f"–ö–∞—Ä–º–∞: `{karma} ({karma_percent}%)`\n"

    #will selffix when add sql migrations
    try:
        warns = user['warns']
        replytext += f"üöß–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: `{warns}`\n" if warns > 0 else ''
    except:
        pass

    replytext += f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: `{total_messages}`\n"
    replytext += f"–ú–∞—Ç—é–∫—ñ–≤: `{total_mats} ({mats_percent}%)`\n"
    replytext += f"Rude-–∫–æ—ó–Ω—ñ–≤: `{rude_coins}`üí∞\n"
    replytext += f"–î–æ–≤–∂–∏–Ω–∞: `{user_size}` —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤, –Ω—É —ñ –≥—ñ–≥–∞–Ω—Ç...\n"

    user_values = orientation(user_id)
    orientation_type = ['–õ–∞—Ç–µ–Ω—Ç–Ω–∏–π', '–ì–µ–Ω–¥–µ—Ä—Ñ–ª—é—ñ–¥', ''][user_values[0]]
    orientation_name = ['Android', 'Apple'][user_values[1]]
    replytext += f"–û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è: `{orientation_type} {orientation_name}` –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"

    replytext = replytext.replace('_', '\\_')

    return replytext


def increase_karma(dest_user_id: int, message_text: str):
    global bot
    if dest_user_id == bot.id:
        if message_text in increase_words :
            return "–¥—è–∫—É—é"

    new_karma = None
    _username = None
    is_changed = False

    replytext = "–í–∏ "
    for increase_word in increase_words:
        if increase_word in message_text:
            users[dest_user_id]['karma'] += 1
            new_karma = users[dest_user_id]['karma']
            _username = users[dest_user_id]['username']
            replytext += '–∑–±—ñ–ª—å—à–∏–ª–∏ '
            is_changed = True
            break
    if not is_changed:
        for decrease_word in decrease_words:
            if decrease_word == message_text :
                users[dest_user_id]['karma'] -= 1
                new_karma = users[dest_user_id]['karma']
                _username = users[dest_user_id]['username']
                replytext += '–∑–º–µ–Ω—à–∏–ª–∏ '
                is_changed = True
                break
    if not is_changed:
        return

    replytext += f'–∫–∞—Ä–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {_username}\n–î–æ –∑–Ω–∞—á–µ–Ω–Ω—è {new_karma}!'
    save_to_file(users)

    return replytext


def get_top():
    replytext = "*–¢–æ–ø-10 –∫–∞—Ä–º–∏ —á–∞—Ç—É:*\n"
    users_list = [ v for k, v in users.items()]
    sorted_users_list = sorted(users_list, key = lambda i: i['karma'], reverse = True)[:10]

    for usr in sorted_users_list:
        username = usr['username']
        karma = usr['karma']
        messages_count = usr['total_messages']

        karma_percent = 0
        if karma and messages_count:
            karma_percent = round(karma * 100 / messages_count, 2)

        replytext+=f'`{username}` - –∫–∞—Ä–º–∞ `{karma} ({karma_percent}%)`\n'

    replytext += "\n*–¢–æ–ø-10 –∞–∫—Ç–∏–≤ —á–∞—Ç—É:*\n"
    sorted_users_list = sorted(users_list, key = lambda i: i['total_messages'], reverse = True)[:10]

    for usr in sorted_users_list:
        username = usr['username']
        messages_count = usr['total_messages']
        replytext+=f'`{username}` - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å `{messages_count}`\n'

    replytext += "\n*–¢–æ–ø-10 –µ–º–æ—Ü—ñ–æ–Ω–∞–ª–∏ —á–∞—Ç—É:*\n"
    sorted_users_list = sorted(users_list, key = lambda i: i['total_mats'], reverse = True)[:10]

    for usr in sorted_users_list:
        username = usr['username']
        mats_count = usr['total_mats']

        total_messages = usr['total_messages']
        mats_percent = 0

        if mats_count > 0 and total_messages > 0:
            mats_percent = mats_count / total_messages
            mats_percent *= 100
            mats_percent = round(mats_percent, 2)

        replytext+=f'`{username}` - –º–∞—Ç—é–∫—ñ–≤ `{mats_count} ({mats_percent}%)`\n'

    replytext += "\n–ö—É–ª–¥–∞—É–Ω —Ç–æ–ø—É - 5 —Ö–≤–∏–ª–∏–Ω"

    replytext = replytext.replace('@', '')

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_top"))
    return replytext, keyboard


def save_to_file(dict):
    f = codecs.open(database_filename, "w", "utf-8")
    f.write(str(users))
    f.close()


async def autodelete_message(chat_id: int, message_id: int, seconds=0):
    await asyncio.sleep(seconds)
    await bot.delete_message(chat_id=chat_id, message_id=message_id)


async def autodelete_messages(chat_id: int, message_ids: list, seconds=0):
    await asyncio.sleep(seconds)
    for message_id in message_ids:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)


def read_users():
    if os.path.isfile(database_filename):
        global users
        with open(database_filename, 'r', encoding= 'utf-8') as f:
            users = eval(f.read())
    else:
        print("File not exist")


@dp.callback_query_handler(lambda call: call.data == "refresh_top")
async def refresh_top(call: types.CallbackQuery):
    replytext, reply_markup = get_top()
    replytext += f'\n`–û–Ω–æ–≤–ª–µ–Ω–æ UTC {datetime.now(timezone.utc)}`'
    await bot.edit_message_text(text=replytext, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)


@dp.callback_query_handler(lambda call: "counter" in call.data)
async def counter(call: types.CallbackQuery):
    like_text = call.data.split('|')[1]
    like_count = call.data.split('|')[2]
    like_count = int(like_count) + 1
    like_message_text = f'{like_text} x {like_count}'
    like_data = f'counter|{like_text}|{like_count}'

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=like_message_text, callback_data=like_data))
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)


@dp.callback_query_handler(lambda call: "print" in call.data)
async def print(call: types.CallbackQuery):
    print_value = call.data.split('|')[1]
    await call.answer(print_value, show_alert=True)


@dp.callback_query_handler(lambda call: "new_user" in call.data)
async def new_user(call: types.CallbackQuery):
    user_id = call.data.split('|')[1]
    user_id = int(user_id)
    user_clicked_id = call.from_user.id

    if user_id == user_clicked_id:
        await call.answer("–î—É–∂–µ —Ä–∞–¥—ñ –≤–∞—Å –±–∞—á–∏—Ç–∏! –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—î—é —á–∞—Ç—É –≤ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.", show_alert=True)
        await bot.delete_message(message_id=call.message.message_id, chat_id=call.message.chat.id)
    else:
        await call.answer("–©–µ —Ä–∞–∑ —ñ –±–∞–Ω :)", show_alert=True)


@dp.message_handler(white_list_chats(), ignore_old_messages(), content_types=['new_chat_members'])
async def add_group(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–Ø –æ–±—ñ—Ü—è—é!", callback_data=f'new_user|{message.from_user.id}'))


    message_text = f"–í—ñ—Ç–∞—î–º–æ {message.from_user.mention} —É –Ω–∞—à–æ–º—É —á–∞—Ç—ñ! –ú–∏ –Ω–µ —á–∞—Ç, –∞ –¥—Ä—É–∂–Ω—è, —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–∞ IT —Å–ø—ñ–ª—å–Ω–æ—Ç–∞, —è–∫–∞ –ø–æ–≤–∞–∂–∞—î –¥—É–º–∫—É –∫–æ–∂–Ω–æ–≥–æ, –ø—Ä–∏—î–¥–Ω–∞–≤—à–∏—Å—å, —Ç–∏ –∑–≥–æ–¥–∂—É—î—à—Å—è —Å—Ç–∞—Ç–∏ —á–µ–º–Ω–æ—é —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ (—Ç–∞ –ø–æ–ª—é–±–∏—Ç–∏ –µ–ø–ª). I —è–∫—à–æ –Ω–µ –≤–∞–∂–∫–æ, –ø–ª—ñ–∑ —Ç—É—Ç –∞–Ω–∫–µ—Ç–∞ –Ω–∞ 8 –ø–∏—Ç–∞–Ω—å https://forms.gle/pY6EjJhNRosUbd9P9"
    msg = await bot.send_animation(chat_id = message.chat.id, reply_to_message_id = message.message_id, animation = open("data/media/welcome.mp4", 'rb'), caption = message_text, reply_markup = keyboard)
    await autodelete_message(msg.chat.id, msg.message_id, destruction_timeout * 5)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='(^–∫–∞—Ä–º–∞$|^karma$)')
@update_user
async def on_msg_karma(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    reply_text = get_karma(user_id)
    msg = await bot.send_message(chat_id, text=reply_text, parse_mode=ParseMode.MARKDOWN)
    await autodelete_message(msg.chat.id, msg.message_id, destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='(^—Ç–æ–ø$|^top$)')
@update_user
async def top_list(message: types.Message):
    chat_id = message.chat.id

    global last_top
    top_list_destruction_timeout = 300
    if not last_top or (datetime.now(timezone.utc) - last_top).seconds > top_list_destruction_timeout:
        reply_text, inline_kb = get_top()
        msg: types.Message = await bot.send_message(chat_id, text=reply_text, reply_markup=inline_kb, parse_mode=ParseMode.MARKDOWN)
        last_top = datetime.now(timezone.utc)
        await autodelete_message(msg.chat.id, msg.message_id, top_list_destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='(^git$|^–≥—ñ—Ç$)')
@update_user
async def git(message: types.Message):
    reply_text = 'github.com/awitwicki/rude_bot'
    msg = await bot.send_message(message.chat.id, reply_to_message_id=message.message_id, text=reply_text, disable_web_page_preview=True)
    await autodelete_message(msg.chat.id, msg.message_id, destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='(^cat$|^–∫–æ—Ç$|^–∫—ñ—Ç$|^–∫–∏—Ü—å–∫–∞$)')
@update_user
async def cat(message: types.Message):
    cat_url = get_random_cat_image_url()
    cat_gender = bool(random.getrandbits(1))
    variant_1, variant_2 = ("–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ :(") if cat_gender else ("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ :(", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ")

    keyboard = types.InlineKeyboardMarkup()
    # keyboard.add(types.InlineKeyboardButton(text="üòª", callback_data="counter|üòª|0"))
    keyboard.add(types.InlineKeyboardButton(text="–ö—ñ—Ç", callback_data=f'print|{variant_1}'))
    keyboard.add(types.InlineKeyboardButton(text="–ö—ñ—Ç–µ—Å—Å–∞", callback_data=f'print|{variant_2}'))
    await bot.send_photo(chat_id=message.chat.id, reply_to_message_id=message.message_id, caption='–ö—ñ—Ç —á–∏ –∫—ñ—Ç–µ—Å—Å–∞?', photo=cat_url, reply_markup=keyboard)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='(^–∑—Ä–∞–¥–∞$|^/report$)')
@update_user
async def zrada(message: types.Message):
    global bot
    if message.reply_to_message and message.from_user.id != message.reply_to_message.from_user.id and message.reply_to_message.from_user.id != bot.id:
        user_name = message.reply_to_message.from_user.mention

        text = f'–í–∏ –æ–≥–æ–ª–æ—Å–∏–ª–∏ –∑—Ä–∞–¥—É!\n' \
            f'{user_name}, —Å–ª—ñ–¥ –ø–æ–¥—É–º–∞—Ç–∏ –Ω–∞–¥ —Å–≤–æ—î—é –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é!\n' \
            '–ê–¥–º—ñ–Ω–∏ –≤–∏—Ä—ñ—à–∞—Ç—å —Ç–≤–æ—é –¥–æ–ª—é (—Ç—é—Ä–º–∞ –∞–±–æ –±–∞–Ω)'

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üçæ", callback_data=f'counter|üçæ|0'))

        await bot.send_message(message.chat.id, text, reply_markup=keyboard)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='samsung|—Å–∞–º—Å—É–Ω–≥|—Å–∞—Å—É–Ω–≥')
@update_user
async def samsung(message: types.Message):
    if random_bool(10):
        msg = await bot.send_photo(message.chat.id, reply_to_message_id=message.message_id, photo=open('data/media/samsung.jpg', 'rb'))
        await autodelete_message(msg.chat.id, msg.message_id, destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='—à–∞—Ä–∏–π|—à–∞—Ä—ñ–π')
@update_user
async def —Åockman(message: types.Message):
    msg = await bot.send_video(message.chat.id, video=open('data/media/sh.MOV', mode='rb'))
    await autodelete_message(msg.chat.id, msg.message_id, destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), regexp='tesl|—Ç–µ—Å–ª')
@update_user
async def tesla(message: types.Message):
    reply_text = "–î–Ω—ñ–≤ –±–µ–∑ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–µ—Å–ª–∏: `0`\nüöóüöóüöó"
    reply_text += '\n\n...btw ' + get_tesla_stock()

    msg = await bot.send_message(message.chat.id, text=reply_text, parse_mode=ParseMode.MARKDOWN)
    await autodelete_message(msg.chat.id, msg.message_id, destruction_timeout)



@dp.message_handler(white_list_chats(), ignore_old_messages(), commands=['scan'])
@update_user
async def scan(message: types.Message):
    global bot
    match_message_result = await match_scan_message(message)

    if match_message_result:
        msg = await bot.send_message(message.chat.id, text=match_message_result, parse_mode=ParseMode.MARKDOWN)
        await autodelete_messages(msg.chat.id, [msg.message_id, message.message_id], destruction_timeout)
        return

    try:
        user_id = message.reply_to_message.from_user.id
        chat_id = message.chat.id

        reply_text = get_karma(user_id)
    except:
        reply_text = "–Ø –∑–ª–æ–º–∞–≤—Å—è :("

    msg = await bot.send_message(chat_id, text=reply_text, parse_mode=ParseMode.MARKDOWN)
    await autodelete_messages(msg.chat.id, [msg.message_id, message.message_id], destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), commands=['start', 'help'])
@update_user
async def start(message: types.Message):
    reply_text = "–ü—Ä–∏–≤—ñ—Ç, —è –†—É–¥–µ–∫—ñ—Ç!\n\n" \
                    "–Ø –º–æ–∂—É –¥–µ—â–æ –∑—Ä–æ–±–∏—Ç–∏, —è–∫—à–æ —Ç–∏ —Å–∫–∞–∂–µ—à —á–∞—Ä—ñ–≤–Ω–µ —Å–ª–æ–≤–æ:\n" \
                    "`–ö–∞—Ä–º–∞` - –ø–æ–∫–∞–∂—É —Ç–≤–æ—é –∫–∞—Ä–º—É,\n" \
                    "`–¢–æ–ø` - –ø–æ–∫–∞–∂—É —Ç–æ–ø —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É,\n" \
                    "`–¢–µ—Å–ª–∞` - –ø–æ—Ä–∞—Ö—É—é –¥–Ω—ñ –±–µ–∑ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–µ—Å–ª–∏,\n" \
                    "`–ö—ñ—Ç` - –ø–æ–∫–∞–∂—É –∫–æ—Ç–∏–∫–∞,\n" \
                    "`–®–∞—Ä—ñ–π` - –ø–æ–∫–∞–∂—É –ø—ñ–≤–Ω–∏–∫–∞,\n" \
                    "`–ó—Ä–∞–¥–∞` - —Ä–æ–∑–ø–æ—á–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–Ω—É,\n" \
                    "`–≥—ñ—Ç/git` - –¥–∞–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ github, –¥–µ –º–æ–∂–Ω–∞ –º–µ–Ω–µ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–∏—Ç–∏,\n" \
                    "`/warn /unwarn` - (admins only) –≤–∏–Ω–µ—Å—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑–∞ –ø–æ–≥–∞–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É,\n" \
                    "`/scan` - (admins only) –ø—Ä–æ—Å–∫–∞–Ω—É—é –∫–æ–≥–æ—Å—å,\n" \
                    "–ê —â–µ —è –≤—ñ—Ç–∞—é –Ω–æ–≤–µ–Ω—å–∫–∏—Ö —É —á–∞—Ç—ñ.\n\n" \
                    f"–í–µ—Ä—Å—ñ—è `{bot_version}`"

    msg = await bot.send_message(message.chat.id, text=reply_text, parse_mode=ParseMode.MARKDOWN)
    await autodelete_messages(msg.chat.id, [msg.message_id, message.message_id], destruction_timeout)


@dp.message_handler(white_list_chats(), ignore_old_messages(), commands=['warn'])
async def warn(message: types.Message):
    global bot
    match_message_result = await match_warn_message(message)

    if match_message_result:
        msg = await bot.send_message(message.chat.id, text=match_message_result, parse_mode=ParseMode.MARKDOWN)
        await autodelete_messages(msg.chat.id, [msg.message_id, message.message_id], destruction_timeout)
        return

    user_total_warns = change_user_warns(message.reply_to_message.from_user.id, 1)

    user_name = message.reply_to_message.from_user.mention

    reply_text = f'{user_name}, –≤–∞–º –≤–∏–Ω–µ—Å–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞! \n' \
        '–¢—Ä–µ–±–∞ –¥—É–º–∞—Ç–∏ —â–æ –≤–∏ –ø–∏—à–µ—Ç–µ, \n' \
        f'–≤–∏ –º–∞—î—Ç–µ –≤–∂–µ {user_total_warns} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è!\n\n' \
        '1 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è - –±—É–¥—å-—è–∫–∏–π –∞–¥–º—ñ–Ω –º–æ–∂–µ –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –º–µ–¥—ñ–∞/—Å—Ç—ñ–∫–µ—Ä–∏/–≤–≤–µ—Å—Ç–∏ –ª—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å!\n' \
        '2 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è - –º—é—Ç –Ω–∞ –¥–µ–Ω—å (–∞–±–æ —Ç–∏–∂–¥–µ–Ω—å, –Ω–∞ —Ä–æ–∑—Å—É–¥ –∞–¥–º—ñ–Ω–∞)!\n' \
        '3 –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è - –±–∞–Ω!\n' \
        '–ê–¥–º—ñ–Ω–∏ –≤–∏—Ä—ñ—à–∞—Ç—å —Ç–≤–æ—é –¥–æ–ª—é'

    reply_text = reply_text.replace('_', '\\_')

    msg = await bot.send_message(message.chat.id, text=reply_text, parse_mode=ParseMode.MARKDOWN)
    await autodelete_message(msg.chat.id,  message.message_id, 0)


@dp.message_handler(white_list_chats(), ignore_old_messages(), commands=['unwarn'])
async def unwarn(message: types.Message):
    match_message_result = await match_warn_message(message)

    if match_message_result:
        msg = await bot.send_message(message.chat.id, text=match_message_result, parse_mode=ParseMode.MARKDOWN)
        await autodelete_messages(msg.chat.id, [msg.message_id, message.message_id], destruction_timeout)
        return

    user_total_warns = change_user_warns(message.reply_to_message.from_user.id, -1)

    user_name = message.reply_to_message.from_user.mention

    reply_text = f'{user_name}, –≤–∞—à–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ!'
    reply_text = reply_text.replace('_', '\\_')

    if user_total_warns > 0:
        reply_text += f'\n–ù–∞ –±–∞–ª–∞–Ω—Å—ñ —â–µ {user_total_warns} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—å!\n\n' 

    msg = await bot.send_message(message.chat.id, text=reply_text, parse_mode=ParseMode.MARKDOWN)
    await autodelete_message(msg.chat.id,  message.message_id, 0)


@dp.message_handler(white_list_chats(), ignore_old_messages())
@update_user
async def on_msg(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    message_id = message.message_id

    messageText = ""
    if message.sticker is not None:
        messageText = message.sticker.emoji
    else:
        messageText = message.text.lower()

    # karma message
    if message.reply_to_message and message.reply_to_message.from_user.id and user_id != message.reply_to_message.from_user.id:
        # check user on karmaspam
        # if not is_flood_message(message):
        karma_changed = increase_karma(message.reply_to_message.from_user.id, messageText)
        if karma_changed:
            msg = await bot.send_message(chat_id, text=karma_changed, reply_to_message_id=message_id)
            await autodelete_message(msg.chat.id, message_id=msg.message_id, seconds=destruction_timeout)

    #ru filter
    if '.ru' in messageText:
        reply_mesage = "*–†–æ—Å—ñ–π—Å—å–∫–∞ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ –≤–≤–∞–∂–∞—Ç–∏—Å—è –ø—Ä—É—Ñ–æ–º!*\n\n–í–∞—Å –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–µ—î—Å—Ç—Ä—É."
        msg = await bot.send_message(chat_id, text=reply_mesage, reply_to_message_id=message_id)

    #random advice
    if random_bool(1):
        reply_mesage = get_random_better_advice()
        reply_to_message_id = None if random.randint(0, 100) < 50 else message_id
        msg = await bot.send_message(chat_id, text=reply_mesage, reply_to_message_id=reply_to_message_id)
        # await autodelete_message(msg.chat.id, message_id=msg.message_id, seconds=destruction_timeout)


if __name__ == '__main__':
    read_users()
    dp.bind_filter(white_list_chats)
    dp.bind_filter(ignore_old_messages)
    executor.start_polling(dp)
